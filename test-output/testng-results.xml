<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" total="14" passed="12">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="29580" started-at="2018-04-14T11:18:02Z" finished-at="2018-04-14T11:18:32Z">
    <groups>
    </groups>
    <test name="Validating SOLR Search APIs" duration-ms="29580" started-at="2018-04-14T11:18:02Z" finished-at="2018-04-14T11:18:32Z">
      <class name="org.api.testcases.DataProviderClass">
        <test-method status="FAIL" signature="AnothertestToFail()[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="AnothertestToFail" duration-ms="4000" started-at="2018-04-14T16:48:02Z" finished-at="2018-04-14T16:48:06Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected content-type "XML" doesn't match actual content-type "application/json;charset=utf-8".
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected content-type "XML" doesn't match actual content-type "application/json;charset=utf-8".

	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
	at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:451)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:613)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)
	at io.restassured.internal.ResponseSpecificationImpl.contentType(ResponseSpecificationImpl.groovy:379)
	at io.restassured.internal.ValidatableResponseOptionsImpl.contentType(ValidatableResponseOptionsImpl.java:244)
	at org.api.testcases.DataProviderClass.AnothertestToFail(DataProviderClass.java:130)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:236)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:81)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AnothertestToFail -->
        <test-method status="PASS" signature="getPPNames(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="getPPNames" duration-ms="2499" started-at="2018-04-14T16:48:06Z" data-provider="getData" finished-at="2018-04-14T16:48:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[pants]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPPNames -->
        <test-method status="PASS" signature="getPPNames(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="getPPNames" duration-ms="2019" started-at="2018-04-14T16:48:09Z" data-provider="getData" finished-at="2018-04-14T16:48:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[shirts]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPPNames -->
        <test-method status="PASS" signature="getPPNames(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="getPPNames" duration-ms="1836" started-at="2018-04-14T16:48:11Z" data-provider="getData" finished-at="2018-04-14T16:48:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[jeans]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPPNames -->
        <test-method status="PASS" signature="getPPNames(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="getPPNames" duration-ms="1551" started-at="2018-04-14T16:48:12Z" data-provider="getData" finished-at="2018-04-14T16:48:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[sdsdfsdfsdfsdfsdfsdf]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPPNames -->
        <test-method status="PASS" signature="hitSolrAPIwithDifferetData(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="hitSolrAPIwithDifferetData" duration-ms="1982" started-at="2018-04-14T16:48:14Z" data-provider="getData" finished-at="2018-04-14T16:48:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[pants]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hitSolrAPIwithDifferetData -->
        <test-method status="PASS" signature="hitSolrAPIwithDifferetData(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="hitSolrAPIwithDifferetData" duration-ms="3734" started-at="2018-04-14T16:48:16Z" data-provider="getData" finished-at="2018-04-14T16:48:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[shirts]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hitSolrAPIwithDifferetData -->
        <test-method status="PASS" signature="hitSolrAPIwithDifferetData(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="hitSolrAPIwithDifferetData" duration-ms="1790" started-at="2018-04-14T16:48:20Z" data-provider="getData" finished-at="2018-04-14T16:48:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[jeans]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hitSolrAPIwithDifferetData -->
        <test-method status="PASS" signature="hitSolrAPIwithDifferetData(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="hitSolrAPIwithDifferetData" duration-ms="1502" started-at="2018-04-14T16:48:22Z" data-provider="getData" finished-at="2018-04-14T16:48:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[sdsdfsdfsdfsdfsdfsdf]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hitSolrAPIwithDifferetData -->
        <test-method status="FAIL" signature="testToFail()[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="testToFail" duration-ms="1751" started-at="2018-04-14T16:48:23Z" finished-at="2018-04-14T16:48:25Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <400> doesn't match actual status code <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <400> doesn't match actual status code <200>.

	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
	at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:451)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:613)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)
	at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:120)
	at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:128)
	at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:117)
	at org.api.testcases.DataProviderClass.testToFail(DataProviderClass.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:236)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:81)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testToFail -->
        <test-method status="PASS" signature="validateStatusCode(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="validateStatusCode" duration-ms="1788" started-at="2018-04-14T16:48:25Z" data-provider="getData" finished-at="2018-04-14T16:48:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[pants]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateStatusCode -->
        <test-method status="PASS" signature="validateStatusCode(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="validateStatusCode" duration-ms="1724" started-at="2018-04-14T16:48:27Z" data-provider="getData" finished-at="2018-04-14T16:48:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[shirts]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateStatusCode -->
        <test-method status="PASS" signature="validateStatusCode(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="validateStatusCode" duration-ms="1819" started-at="2018-04-14T16:48:28Z" data-provider="getData" finished-at="2018-04-14T16:48:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[jeans]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateStatusCode -->
        <test-method status="PASS" signature="validateStatusCode(java.lang.String)[pri:0, instance:org.api.testcases.DataProviderClass@3abbfa04]" name="validateStatusCode" duration-ms="1516" started-at="2018-04-14T16:48:30Z" data-provider="getData" finished-at="2018-04-14T16:48:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[sdsdfsdfsdfsdfsdfsdf]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateStatusCode -->
      </class> <!-- org.api.testcases.DataProviderClass -->
    </test> <!-- Validating SOLR Search APIs -->
  </suite> <!-- Suite -->
</testng-results>
